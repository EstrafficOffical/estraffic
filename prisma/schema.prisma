generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL") // pooled (6543) — для runtime
  directUrl = env("DIRECT_URL") // direct (5432) — для миграций/seed
}

//
// ─── ENUMS ──────────────────────────────────────────────────────────────────────
//
enum Role {
  USER
  ADMIN
}

enum UserStatus {
  PENDING
  APPROVED
  BANNED
}

enum OfferMode {
  Auto
  Manual
}

enum OfferStatus {
  ACTIVE
  ARCHIVED
  PAUSED
}

enum PayoutType {
  CPA
  CPL
  CPS
  REVSHARE
  OTHER
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ConversionType {
  REG
  DEP
  REBILL
  SALE
  LEAD
}

//
// ─── MODELS ─────────────────────────────────────────────────────────────────────
//
model User {
  id           String     @id @default(cuid())
  email        String     @unique
  name         String?
  passwordHash String
  image        String?
  role         Role       @default(USER)
  status       UserStatus @default(PENDING) // ⬅️ добавлено
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  telegram     String?    @db.VarChar(191)

  // Relations
  wallets       Wallet[]
  payouts       Payout[]
  sessions      Session[]
  accounts      Account[]
  clicks        Click[]
  conversions   Conversion[]
  offerAccesses OfferAccess[]
  offerRequests OfferRequest[]

  // Useful indexes for admin panels
  @@index([role])
  @@index([status])
  @@index([createdAt])
  @@index([telegram])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Offer {
  id        String      @id @default(cuid())
  title     String
  tag       String?
  cpa       Decimal?    @db.Decimal(12, 2)
  geo       String
  vertical  String
  kpi1      Float?
  kpi2      Float?
  mode      OfferMode   @default(Auto)
  status    OfferStatus @default(ACTIVE)
  targetUrl String?     @db.Text
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // Back-relations
  accesses    OfferAccess[]
  requests    OfferRequest[]
  clicks      Click[]
  conversions Conversion[]

  @@index([title])
  @@index([geo])
  @@index([vertical])
  @@index([status])
}

model OfferAccess {
  id        String   @id @default(cuid())
  userId    String
  offerId   String
  approved  Boolean  @default(false)
  createdAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  offer Offer @relation(fields: [offerId], references: [id], onDelete: Cascade)

  @@unique([userId, offerId])
}

model OfferRequest {
  id          String        @id @default(cuid())
  userId      String
  offerId     String
  message     String?
  status      RequestStatus @default(PENDING)
  createdAt   DateTime      @default(now())
  processedAt DateTime?

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  offer Offer @relation(fields: [offerId], references: [id], onDelete: Cascade)

  @@unique([userId, offerId])
  @@index([status, createdAt])
}

model Click {
  id        String   @id @default(cuid())
  userId    String?
  offerId   String
  subId     String?
  ip        String?
  userAgent String?
  referer   String?
  country   String?
  source    String?
  sub1      String?
  sub2      String?
  sub3      String?
  sub4      String?
  sub5      String?
  campaign  String?
  adset     String?
  creative  String?
  clickId   String?
  createdAt DateTime @default(now())

  user  User? @relation(fields: [userId], references: [id], onDelete: SetNull)
  offer Offer @relation(fields: [offerId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([offerId, createdAt])
  @@index([subId, createdAt])
  @@index([clickId])
}

model Conversion {
  id        String         @id @default(cuid())
  userId    String?
  offerId   String
  subId     String?
  type      ConversionType
  amount    Decimal?       @db.Decimal(12, 2)
  currency  String?
  txId      String?
  createdAt DateTime       @default(now())

  user  User? @relation(fields: [userId], references: [id], onDelete: SetNull)
  offer Offer @relation(fields: [offerId], references: [id], onDelete: Cascade)

  @@unique([offerId, txId])
  @@index([userId, createdAt])
  @@index([offerId, createdAt])
  @@index([subId, createdAt])
}

model Wallet {
  id        String   @id @default(cuid())
  userId    String
  label     String
  address   String
  verified  Boolean  @default(false)
  isPrimary Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@unique([userId, address])
  @@index([userId, isPrimary])
}

model Payout {
  id        String   @id @default(cuid())
  userId    String
  amount    Decimal  @db.Decimal(12, 2)
  currency  String   @default("USD")
  status    String   @default("Paid")
  txHash    String?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@index([userId, createdAt])
}
